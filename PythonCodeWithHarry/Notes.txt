DAY 1:
Introduction

DAY 2: 
Python prpgrams (exsiting)

DAY 3:
MODULES IN PYTHON
Module is like a code library which is used to borrow others code in our program. 
There are two types of modules in python:

Built in Modules - These modules are ready to import why bcz these are already installed. 

External Modules - These modules are others code that we use in our program with the help of pip command to install.

THE pip COMMAND
It can be used as a package manager pip to install a python module. 

DAY 4:
source in file DAY4.

DAY 5:
source in file DAY5.

DAY 6:
VARIABLES AND DATA TYPES.

VARIABLES is used store a value

DATA TYPES identifies which type if value variable is holding like number, string etc.

LIST: MUTABLE
it is a ordered collection of data in which elements separated by comma and enclosed in a square brackets. LIST value can be changed after creation.

TUPLE: IMMUTABLE
it is a ordered collection of data in which elements separated by comma and enclosed in a square brackets. TUPLE value cannot be changed after creation.

DICTIONARY:
it is unordered colllection of data of key value pairs "name":"huzaifa" enclosed in curly brackets and value in double quotes.

DAY 7:
Exercise 1 Calculator.

DAY 8:
Solution Exercise 1.

DAY 9:
TYPE CASTING OR CONVERSION.
The conversion of one data type into another is known as type casting or conversion.

There are two types of type casting.

Explicit conversion.
The conversion that is done by developer is known as Explicit conversion.
Example:
This is string now
a = "1"
b = "2"
Now this is Number
print(int(a) + int(b))

Implicit conversion.
Data types in python have not same level some is higher some is lower in implicit if the one variable of different data type then python automatically converts into higher level.

DAY 10:
User Input.
Getting user input there are some thing to know that in python while taking user input the by default value of data type is STRING. so if you are taking a number as input it is necessary to write the data type like INT.


DAY 11:
STRINGS ARE IMMUTABLE WHEN WE APPLY METHOD ON A STRING IT RETURNS A NEW STRING THEY ARE NOT CHANGEABLE.
STRINGS.
Anything that you enclose in a single or double quotes is called string.



DAY 12:
STRING SLICING.
Indexing.
Accessing the characters starting from 0.


DAY 13:
STRINGS METHODS.
Practice Q's file.


DAY 14.
IF ELSE STATEMENTS.
Solve Q's file.


DAY 15: 
Ex-2.


DAY 16:
MATCH CASE STATEMENTS.
This is similar to if else statements but in this instead of if else we define a variable for MATCH and cases as in C or C++ we break statements but in this we don't have break statements.
Solve Q's in file.


DAY 17:
FOR LOOP.

for variable in RANGE(Start,end,step)
    print(variable)

This is the syntax of for loop RANGE is used for numbers/integers and for string use any variable.
Solve Q's in file.


DAY 18:
WHILE LOOP.
SYNTAX.
i = 1
 while i <= 10:
    print(i)
    i = i + 1
Solve Q's in file.


DAY 19.
BREAK & CONTINUE.

BREAK.
it is used to break the loop on given the given iteration like totally breaks the loop.

CONTINUE.
it is used to skip the iteration on the given iteration while the remaining loop will run as per the given condition.
Solve Q's in file.


DAY 20.
FUNCTIONS.
Functions is a block of code that is use to perform specific task and can be reuse in the program multiple times.
In Python the Functions is Start with the DEF keyword.
Two Types of Functions.
Built in.
The built in functions is pre-coded in python. These are exaples of some built in functions min() max() len() sum()
range() type() set() etc.

User define functions.
The user define functions are the funcrions that are define by the user to perform specific task. 
Solve Q's in file.


DAY 21.
FUNCTIONS ARGUMENTS.
Function arguments are the values you pass into a function when you call it so the funcrion can do something with them.
There are four type of function arguments.
Default Arguments
Keyword Arguments
Variable length Arguments
Required Arguments


DAY 22.
LISTS.
Lists are used to data in order. They store multiple items in a one variable. Lists are separated by comma and enclose in [] brackets. List can be change after creation. The index of lists starts from 0. 
LIST COMPREHENSION.
It is used to make a new list from older list depending on some condition.
SYNTAX.
List = [Expression(item) for item in iterable if Condition]
lst = ["huzaifa", "usama", "car", "bye", "Bike"]
lst2 = [item for item in lst if (len(item)) > 3].
Solve Q's in file.


DAY 23.
LIST METHODS.
MOST COMMON USED METHODS.
append(x)	Adds an element x to the end of the list.
insert(i, x)	Inserts element x at index i.
extend(iterable)	Adds all elements from another iterable (like another list).
remove(x)	Removes the first occurrence of value x.
pop([i])	Removes and returns the element at index i. If i is not provided, removes last item.
clear()	Removes all elements from the list.
index(x)	Returns the index of the first occurrence of value x.
count(x)	Counts how many times x appears in the list.
sort()	Sorts the list in ascending order (modifies the original list).
reverse()	Reverses the list in place.
copy()	Returns a shallow copy of the list.



DAY 24.
TUPLE.
It is order collection of data items. The value in tuple not change after creation. Tuple is IMMUTABLE. It is enclosed in round brackets () and values separated by , comma.
Practice in file


DAY 25.
OPERATIONS ON TUPLES.
Tuples are IMMUTABLE not changed after creation hence if you want to add values first convert them into LIST and add values and then turn back that LIST into TUPLE.
Practice in file.


DAY 26.
Exercise 2 Solution.


DAY 27.
Exercise 3.


DAY 28. 
f Strings.
When we want to used variable values in print statements the we used f string. The variable is enclosed in {}. it was introduced in from 3.6 version. it is used like print(f"My Name is {name}").


DAY 29.
Doc String & PEP8.
Python docstrings are the string literals that appear right after the definition of a function, method, class, or module. Whenever string literals are present just after the definition of a function, module, class or method, they are associated with the object as their doc attribute. We can later use this attribute to retrieve this docstring.

PEP8.
PEP 8 is a document that provides guidelines and best practices on how to write Python code. It was written in 2001 by Guido van Rossum, Barry Warsaw, and Nick Coghlan. The primary focus of PEP 8 is to improve the readability and consistency of Python code.
Keyword import this