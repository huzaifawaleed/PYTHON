DAY 1:
Introduction

DAY 2: 
Python prpgrams (exsiting)

DAY 3:
MODULES IN PYTHON
Module is like a code library which is used to borrow others code in our program. 
There are two types of modules in python:

Built in Modules - These modules are ready to import why bcz these are already installed. 

External Modules - These modules are others code that we use in our program with the help of pip command to install.

THE pip COMMAND
It can be used as a package manager pip to install a python module. 

DAY 4:
source in file DAY4.

DAY 5:
source in file DAY5.

DAY 6:
VARIABLES AND DATA TYPES.

VARIABLES is used store a value

DATA TYPES identifies which type if value variable is holding like number, string etc.

LIST: MUTABLE
it is a ordered collection of data in which elements separated by comma and enclosed in a square brackets. LIST value can be changed after creation.

TUPLE: IMMUTABLE
it is a ordered collection of data in which elements separated by comma and enclosed in a square brackets. TUPLE value cannot be changed after creation.

DICTIONARY:
it is unordered colllection of data of key value pairs "name":"huzaifa" enclosed in curly brackets and value in double quotes.

DAY 7:
Exercise 1 Calculator.

DAY 8:
Solution Exercise 1.

DAY 9:
TYPE CASTING OR CONVERSION.
The conversion of one data type into another is known as type casting or conversion.

There are two types of type casting.

Explicit conversion.
The conversion that is done by developer is known as Explicit conversion.
Example:
This is string now
a = "1"
b = "2"
Now this is Number
print(int(a) + int(b))

Implicit conversion.
Data types in python have not same level some is higher some is lower in implicit if the one variable of different data type then python automatically converts into higher level.

DAY 10:
User Input.
Getting user input there are some thing to know that in python while taking user input the by default value of data type is STRING. so if you are taking a number as input it is necessary to write the data type like INT.


DAY 11:
STRINGS ARE IMMUTABLE WHEN WE APPLY METHOD ON A STRING IT RETURNS A NEW STRING THEY ARE NOT CHANGEABLE.
STRINGS.
Anything that you enclose in a single or double quotes is called string.



DAY 12:
STRING SLICING.
Indexing.
Accessing the characters starting from 0.


DAY 13:
STRINGS METHODS.
Practice Q's file.


DAY 14.
IF ELSE STATEMENTS.
Solve Q's file.


DAY 15: 
Ex-2.


DAY 16:
MATCH CASE STATEMENTS.
This is similar to if else statements but in this instead of if else we define a variable for MATCH and cases as in C or C++ we break statements but in this we don't have break statements.
Solve Q's in file.


DAY 17:
FOR LOOP.

for variable in RANGE(Start,end,step)
    print(variable)

This is the syntax of for loop RANGE is used for numbers/integers and for string use any variable.
Solve Q's in file.


DAY 18:
WHILE LOOP.
SYNTAX.
i = 1
 while i <= 10:
    print(i)
    i = i + 1
Solve Q's in file.


DAY 19.
BREAK & CONTINUE.

BREAK.
it is used to break the loop on given the given iteration like totally breaks the loop.

CONTINUE.
it is used to skip the iteration on the given iteration while the remaining loop will run as per the given condition.
Solve Q's in file.


DAY 20.
FUNCTIONS.
Functions is a block of code that is use to perform specific task and can be reuse in the program multiple times.
In Python the Functions is Start with the DEF keyword.
Two Types of Functions.
Built in.
The built in functions is pre-coded in python. These are exaples of some built in functions min() max() len() sum()
range() type() set() etc.

User define functions.
The user define functions are the funcrions that are define by the user to perform specific task. 
Solve Q's in file.


DAY 21.
FUNCTIONS ARGUMENTS.
Function arguments are the values you pass into a function when you call it so the funcrion can do something with them.
There are four type of function arguments.
Default Arguments
Keyword Arguments
Variable length Arguments
Required Arguments


DAY 22.
LISTS.
Lists are used to data in order. They store multiple items in a one variable. Lists are separated by comma and enclose in [] brackets. List can be change after creation. The index of lists starts from 0. 
LIST COMPREHENSION.
It is used to make a new list from older list depending on some condition.
SYNTAX.
List = [Expression(item) for item in iterable if Condition]
lst = ["huzaifa", "usama", "car", "bye", "Bike"]
lst2 = [item for item in lst if (len(item)) > 3].
Solve Q's in file.


DAY 23.
LIST METHODS.
MOST COMMON USED METHODS.
append(x)	Adds an element x to the end of the list.
insert(i, x)	Inserts element x at index i.
extend(iterable)	Adds all elements from another iterable (like another list).
remove(x)	Removes the first occurrence of value x.
pop([i])	Removes and returns the element at index i. If i is not provided, removes last item.
clear()	Removes all elements from the list.
index(x)	Returns the index of the first occurrence of value x.
count(x)	Counts how many times x appears in the list.
sort()	Sorts the list in ascending order (modifies the original list).
reverse()	Reverses the list in place.
copy()	Returns a shallow copy of the list.



DAY 24.
TUPLE.
It is order collection of data items. The value in tuple not change after creation. Tuple is IMMUTABLE. It is enclosed in round brackets () and values separated by , comma.
Practice in file


DAY 25.
OPERATIONS ON TUPLES.
Tuples are IMMUTABLE not changed after creation hence if you want to add values first convert them into LIST and add values and then turn back that LIST into TUPLE.
Practice in file.


DAY 26.
Exercise 2 Solution.


DAY 27.
Exercise 3.


DAY 28. 
f Strings.
When we want to used variable values in print statements the we used f string. The variable is enclosed in {}. it was introduced in from 3.6 version. it is used like print(f"My Name is {name}").


DAY 29.
Doc String & PEP8.
Python docstrings are the string literals that appear right after the definition of a function, method, class, or module. Whenever string literals are present just after the definition of a function, module, class or method, they are associated with the object as their doc attribute. We can later use this attribute to retrieve this docstring.

PEP8.
PEP 8 is a document that provides guidelines and best practices on how to write Python code. It was written in 2001 by Guido van Rossum, Barry Warsaw, and Nick Coghlan. The primary focus of PEP 8 is to improve the readability and consistency of Python code.
Keyword import this.


DAY 30.
Recursion.
Recursion is the process of defining something in terms of itself.
Python Recursive Function
In Python, we know that a function can call other functions. It is even possible for the function to call itself. These types of construct are termed as recursive functions.



DAY 31.
Sets.
Sets are unordered collection of data items. sets store multiple values in one variable. Sets are unchangable after creation. It is separated by comma and enclosed in curly {} brackets. sets do not contain duplicate values.


DAY 32.
Set Methods.
Joining methids in python more or less work as same in mathematics. We can perform opertion on sets like UNION & INTERSECTION like mathematics.

1. UNION() & UPDATE().

In union() it returns the values of two sets in a new third set like set3 = set1.union(set2).

In update() it returns the values of both sets in first set there is no need to create third variable like car1.update(car2).

2. INTERSECTION() & INTERSECTION_UPDATE().

In intersection() it returns the common values of both sets in a new set like set3 = set1.intersection(set2).

In intersection_update() it returns the values of both sets in first set there is no need to create third variable like car1.intersection_update(car2).


3. symmetric_difference() & symmetric_difference_update().

In symmetric_difference() it returns the values which are not common in both sets in a new set like set3 = set1.symmetric_difference(set2).

In symmetric_difference_update() it returns the values which are not common in both sets in first set there is no need tocreate third variable like car1.symmetric_difference_update(car2).

4. Difference() & Difference_Update().

In difference() it returns the values which are only present in orignal set means set1 in a new variable like set3 = set1.difference(set2).

In difference_update() it returns the values which are only present in orignal set means set1 there is no need of new variable it updates existing variable like set1.difference_update(set2).


SETS METHODS.

isdisjoint()
it is use to check that the values of set is present in another set if present it return FALSE else TRUE.

issuperset()
it checks if ALL the values of particular/second set is present in original set if present it returns TRUE else FALSE.

issubset()
it is the opposite of issuperset() checks if ALL the values of original set is present in particular/second set if present it returns TRUE else FALSE.


add().
it is used to add a single value in a set.


update().
if you want to add one or item in a set simply create a new set or use update method to up the existing set.


remove()/discard().
it remove or discard the item from set.


pop()
this method use to remove the last item from set but sets are unorder we don't which item will be remove to know this assign pop() to a variable.

del
it deletes the entire set it is not a method it is a keyword.

clear().
This method clears the entire set and returns a empty set.

Solve Q's in file.


DAY 33.
DICTIONARY.
It is a ordered collection of data items. It is used to store multiple items in a single variable. Dictionary items are key-value pairs separated by commas and enclosed in {} brackets.

DAY 34.
DICTIONARY METHODS.

Keys().
is used to vew all keys in dictionary.

Values().
is used to vew all values in dictionary.

Clear().
is used to clear the dictionary. | students.clear()  


update().
is used to add the value to the dictionary. | new_student = {"Zoya": {"age": 23, "course": "JavaScript"}}
students.update(new_student)

pop(key).
is used to remove the value from dictionary. | students.pop("Usman")

del is a keyword.
is used to del the value from the dictionary.

setdefault().
is used set the default value | students.setdefault("Hassan", {"age": 0, "course": "Not Assigned"})


DAY 35.
For loop with else.
for loop with else is like when the the iteration of loop is completed then the else block will execute otherwise if the iteration is not completed the else block will not execute. else block ususally execute when all the conditions are met.

for i in range(5):
print(i)
  if i == 3:
  break
else:
  print("Loop Finished") 

like in this i used break in this case else is not execute if i remove break then the iteration will complete in that case the else block will execute.    


DAY 36.
Exception Handling.

Exception handling is the process of responding to unwanted or unexpected events when a computer program runs. Exception handling deals with these events to avoid the program or system crashing, and without this process, exceptions would disrupt the normal operation of a program.

Exceptions in Python.
Python has many built-in exceptions that are raised when your program encounters an error (something in the program goes wrong).

When these exceptions occur, the Python interpreter stops the current process and passes it to the calling process until it is handled. If not handled, the program will crash.

Python try...except.
try….. except blocks are used in python to handle errors and exceptions. The code in try block runs when there is no error. If the try block catches the error, then the except block is executed.

Syntax:
try:
     #statements which could generate 
     #exception
except:
     #Soloution of generated exception